package xinrui.cloud.service.impl;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import xinrui.cloud.BootException;
import xinrui.cloud.common.utils.DateUtil;
import xinrui.cloud.compoment.Application;
import xinrui.cloud.domain.*;
import xinrui.cloud.domain.dto.*;
import xinrui.cloud.domain.vto.*;
import xinrui.cloud.dto.PageDto;
import xinrui.cloud.service.TechnologyFinancialFileService;

import java.text.ParseException;
import java.util.Date;
import java.util.List;


@Service
public class TechnologyFinancialServiceImpl extends BaseServiceImpl<TechnologyFinancial> implements xinrui.cloud.service.TechnologyFinancialService {

    @Autowired
    TechnologyFinancialFileService technologyFinancialFileService;

    @Override
    public List<TechnologyLoanDateDto> dates() {
        return TechnologyLoanDateDto.copy(dao.listObjBy(TechnologyLoanDate.class));
    }

    @Override
    public List<TechnologyLoanTypeDto> types() {
        return TechnologyLoanTypeDto.copy(dao.listObjBy(TechnologyLoanType.class));
    }

    @Override
    public List<TechnologyLoanAmountDto> amounts() {
        return TechnologyLoanAmountDto.copy(dao.listObjBy(TechnologyLoanAmount.class));
    }

    @Override
    public TechnologyFinancialDto saveByDto(TechnologyFinancialVto technologyFinancialVto) {

        checkDraftCount(technologyFinancialVto);

        TechnologyFinancial technologyFinancial = new TechnologyFinancial();

        checkProcessData(technologyFinancialVto, technologyFinancial);

        //申请条件
        List<TechnologyApplyCondition> technologyApplyConditions = TechnologyApplyConditionsVto.toBean(technologyFinancialVto.getTechnologyApplyConditions());
        technologyFinancial.getTechnologyApplyConditions().addAll(technologyApplyConditions);

        //办理流程
        List<TechnologyProcess> technologyProcesses = TechnologyProcessesVto.toBean(technologyFinancialVto.getTechnologyProcesses());
        technologyFinancial.getTechnologyProcesses().addAll(technologyProcesses);
        if (technologyProcesses.size() > 20) {
            throw new BootException("最多添加20条申请流程!");
        }

        //常见问题
        List<TechnologyUsualProblem> technologyUsualProblems = TechnologyUsualProblemsVto.toBean(technologyFinancialVto.getTechnologyUsualProblems());
        technologyFinancial.getTechnologyUsualProblems().addAll(technologyUsualProblems);
        if (technologyUsualProblems.size() > 5) {
            throw new BootException("最多添加5条问题!");
        }

        BeanUtils.copyProperties(technologyFinancialVto, technologyFinancial, "viewImages", "loanTimeLimit"
                , "loanAmount", "technologyApplyConditions", "technologyUsualProblems", "technologyProcesses", "applyEndDate");

        technologyFinancial.setUserId(Application.getCurrentUser().getId());

        return TechnologyFinancialDto.copy(persistAndGet(technologyFinancial));

    }

    /**
     * 检查当前用户创建的位于草稿箱中的产品数量
     *
     * @param technologyFinancialVto
     */
    private void checkDraftCount(TechnologyFinancialVto technologyFinancialVto) {
        if (technologyFinancialVto.getStatus() == TechnologyFinancial.TechnologyStatus.DRAFT.value()) {
            DetachedCriteria countCriteria = DetachedCriteria.forClass(TechnologyFinancial.class)
                    .add(Restrictions.eq("userId", Application.getCurrentUser().getId()))
                    .add(Restrictions.eq("status", TechnologyFinancial.TechnologyStatus.DRAFT.value()));
            if (count(countCriteria) >= 20) {
                throw new BootException("草稿箱最多添加20条!");
            }
        }
    }

    @Override
    public List<TechnologyFinancialDto> publicById(Long id) {
        TechnologyFinancial byId = getTechnologyFinancialAndCheck(id);
        Integer status = byId.getStatus();
        if (status != TechnologyFinancial.TechnologyStatus.DRAFT.value()
                && status != TechnologyFinancial.TechnologyStatus.REFUSED.value()) {
            throw new BootException("只有被拒绝的产品或者草稿箱中的产品可以发布!");
        }
        byId.setStatus(TechnologyFinancial.TechnologyStatus.APPLYING.value());
        return drafts();
    }

    /**
     * 根据id获取产品对象{@link TechnologyFinancial}
     *
     * @param id {@link TechnologyFinancial#getId()}
     * @return {@link TechnologyFinancial}
     */
    private TechnologyFinancial getTechnologyFinancialAndCheck(Long id) {
        TechnologyFinancial byId = findById(id);
        Assert.notNull(byId, "科技金融产品对象找不到!");
        return byId;
    }

    @Override
    public List<TechnologyFinancialDto> drafts() {
        return listByStatus(TechnologyFinancial.TechnologyStatus.DRAFT.value());
    }

    @Override
    public TechnologyFinalAuditDto audits() {
        return new TechnologyFinalAuditDto(listByStatus(TechnologyFinancial.TechnologyStatus.REFUSED.value()),
                listByStatus(TechnologyFinancial.TechnologyStatus.APPLYING.value()));
    }

    @Override
    public TechnologyFinancialOnlineDto onlines() {
        DetachedCriteria statusCriteria = getDetachedCriteria(TechnologyFinancial.TechnologyStatus.ONLINE.value());
        statusCriteria.add(Restrictions.eq("category", TechnologyFinancial.TechnologyType.CREDIT_LOAN.value()));
        List<TechnologyFinancialDto> creditList = TechnologyFinancialDto.copy(listBydCriteria(statusCriteria));

        statusCriteria = getDetachedCriteria(TechnologyFinancial.TechnologyStatus.ONLINE.value());
        statusCriteria.add(Restrictions.eq("category", TechnologyFinancial.TechnologyType.MORTGAGES.value()));
        List<TechnologyFinancialDto> mortgagesList = TechnologyFinancialDto.copy(listBydCriteria(statusCriteria));

        return new TechnologyFinancialOnlineDto(creditList, mortgagesList);
    }

    @Override
    public PageDto<List<TechnologyFinancialDto>> audits(int status, String bank, int currentPage, int pageSize) {
        if (status != TechnologyFinancial.TechnologyStatus.APPLYING.value() && status != TechnologyFinancial.TechnologyStatus.ONLINE.value())
            throw new BootException("参数错误!");
        DetachedCriteria statusCriteria = getStatusCriteria(status);
        if (!StringUtils.isEmpty(bank)) {
            //        statusCriteria.add(Restrictions.eq(""))
//        TODO 银行的过滤需要添加
        }
        PageDto<List<TechnologyFinancial>> page = new PageDto<>(--currentPage * pageSize, pageSize, statusCriteria);
        dao.pageByCriteria(page);
        List<TechnologyFinancialDto> copy = TechnologyFinancialDto.copy(page.getT());
        return new PageDto<List<TechnologyFinancialDto>>(page.getTotalPage(), copy);
    }

    @Override
    public void audit(int id, TechnologyFinancial.TechnologyStatus status, String reason) {
        if (status != TechnologyFinancial.TechnologyStatus.ONLINE
                && status != TechnologyFinancial.TechnologyStatus.REFUSED
                && status != TechnologyFinancial.TechnologyStatus.OFFLINE) {
            throw new BootException("参数错误!");
        }
        TechnologyFinancial technologyFinancialAndCheck = getTechnologyFinancialAndCheck((long) id);
        if (status == TechnologyFinancial.TechnologyStatus.OFFLINE) {
            technologyFinancialAndCheck.setStatus(TechnologyFinancial.TechnologyStatus.REFUSED.value());
        } else {
            technologyFinancialAndCheck.setStatus(status.value());
            if (status == TechnologyFinancial.TechnologyStatus.REFUSED) {
                technologyFinancialAndCheck.setRefuseReason(reason);
            } else {
                technologyFinancialAndCheck.setRefuseReason(null);
            }

        }
        merge(technologyFinancialAndCheck);
    }

    @Override
    public void appointment(int id, TechnologyFinancialUserDto user) {

        Assert.notNull(user, "用户数据不能为空!");
        TechnologyFinancialUser technologyFinancialUser = new TechnologyFinancialUser();
        BeanUtils.copyProperties(user, technologyFinancialUser);

        TechnologyFinancial technologyFinancialAndCheck = getTechnologyFinancialAndCheck((long) id);
        technologyFinancialUser.setTechnologyFinancial(technologyFinancialAndCheck);
        technologyFinancialAndCheck.getTechnologyFinancialUsers().add(technologyFinancialUser);
        merge(technologyFinancialAndCheck);
    }

    @Override
    public PageDto<List<TechnologyFinancialBaseInfoDto>> onlines(int amount, int limit, String category, String name, int currentPage, int pageSize) {

        return null;
    }

    /**
     * 根据状态查找{@link TechnologyFinancialDto}列表
     *
     * @param status 详情见{@link TechnologyFinancial.TechnologyStatus#values()}
     * @return {@code List<TechnologyFinancialDto>}
     */
    private List<TechnologyFinancialDto> listByStatus(int status) {
        DetachedCriteria statusCriteria = getDetachedCriteria(status);
        return TechnologyFinancialDto.copy(listBydCriteria(statusCriteria));
    }

    private DetachedCriteria getDetachedCriteria(int status) {
        return getStatusCriteria(status)
                .add(Restrictions.eq("userId", Application.getCurrentUser().getId()));
    }

    private DetachedCriteria getStatusCriteria(int status) {
        return DetachedCriteria.forClass(TechnologyFinancial.class)
                .add(Restrictions.eq("status", status));
    }

    /**
     * 从{@link TechnologyFinancialVto}对象提取非基本对象的参数，并且设置到{@link TechnologyFinancial}对象中
     *
     * @param technologyFinancialVto {@link TechnologyFinancialVto} 前端接收对象
     * @param technologyFinancial    {@link TechnologyFinancial}实体保存对象
     */
    private void checkProcessData(TechnologyFinancialVto technologyFinancialVto, TechnologyFinancial technologyFinancial) {
        //关联存储过的文件对象
        List<ViewImagesVto> viewImages = technologyFinancialVto.getViewImages();
        Assert.notEmpty(viewImages, "展示图片为必选项!");
        for (ViewImagesVto file : viewImages) {
            TechnologyFinancialFile fileObj = technologyFinancialFileService.findByPath(file.getFullPath());
            if (fileObj == null) {
                throw new BootException("所选文件已经被删除!");
            }
            fileObj.setTechnologyFinancial(technologyFinancial);
            technologyFinancial.getViewImages().add(fileObj);
            if (technologyFinancial.getViewImages().size() > 6) {
                throw new BootException("只支持传递6张展示图片!");
            }
        }

        //贷款期限
        LoanTimeLimitVto loanTimeLimit = technologyFinancialVto.getLoanTimeLimit();
        Assert.notNull(loanTimeLimit, "贷款期限为必选项！");
        TechnologyLoanDate technologyLoanDate = dao.findSingleByProperty(TechnologyLoanDate.class, "id", loanTimeLimit.getId());
        if (technologyLoanDate == null) {
            throw new BootException("错误的贷款期限选项!");
        }
        technologyFinancial.setLoanTimeLimit(technologyLoanDate);

        //贷款额度
        LoanAmountVto loanAmount = technologyFinancialVto.getLoanAmount();
        Assert.notNull(loanAmount, "贷款额度为必选项！");
        TechnologyLoanAmount technologyLoanAmount = dao.findSingleByProperty(TechnologyLoanAmount.class, "id", loanAmount.getId());
        if (technologyLoanAmount == null) {
            throw new BootException("错误的贷款额度选项!");
        }
        technologyFinancial.setLoanAmount(technologyLoanAmount);

        List<TechnologyLoanTypeVto> technologyLoanTypes = technologyFinancialVto.getTechnologyLoanTypes();
        Assert.notEmpty(technologyLoanTypes, "可抵押类型为必选项!");
        for (TechnologyLoanTypeVto type : technologyLoanTypes) {
            TechnologyLoanType technologyLoanType = dao.findSingleByProperty(TechnologyLoanType.class, "id", type.getId());
            if (technologyLoanType == null) {
                throw new BootException("错误的可抵押类型选项!");
            }
            technologyFinancial.getTechnologyLoanTypes().add(technologyLoanType);
        }


        String endDate = technologyFinancialVto.getApplyEndDate();
        if (endDate != null) {
            try {
                Date parse = DateUtil.parse(endDate);
                technologyFinancial.setApplyEndDate(parse);
            } catch (ParseException e) {
                throw new BootException("结束申请时间格式错误!!");
            }
        }

        String category = technologyFinancialVto.getCategory();
        boolean notTrue = !TechnologyFinancial.TechnologyType.CREDIT_LOAN.value().equals(category) &&
                !TechnologyFinancial.TechnologyType.MORTGAGES.value().equals(category);
        if (notTrue) {
            throw new BootException("不支持的贷款类别!");
        }
    }
}
