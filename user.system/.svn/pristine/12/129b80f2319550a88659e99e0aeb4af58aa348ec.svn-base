package xinrui.cloud.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import xinrui.cloud.config.EhcacheComponent;
import xinrui.cloud.dto.ResultDto;
import xinrui.cloud.dto.UserDto;
import xinrui.cloud.service.UserService;
import net.sf.ehcache.Cache;
import net.sf.ehcache.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint;
import org.springframework.web.bind.annotation.*;

import javax.validation.constraints.NotNull;

/**
 * <B>Title:</B>UserController</br>
 * <B>Description:</B>用户相关接口</br>
 * <B>Copyright: </B>Copyright (c) 2019 </br>
 *
 * @author liuliuliu
 * @version 1.0
 * @date2019/6/26 20:17
 */
@Api("用户相关接口")
@RestController
@RequestMapping("user")
public class UserController {

    private final static Logger LOGGER = LoggerFactory.getLogger(UserController.class);

    @Autowired
    UserService userService;

    @Autowired
    EhcacheComponent ehcacheComponent;

    @Autowired
    CheckTokenEndpoint checkTokenEndpoint;

    /**
     * 根据用户名称查询用户
     *
     * @param username
     * @return
     */
    @GetMapping("find/{username}")
    @ApiOperation( position = 1, value = "通过用户名称获取用户详情", notes = "通过用户名称获取用户详情", tags = "用户相关接口", httpMethod = "GET", produces = "application/json")
    @ApiImplicitParam(name = "username", value = "用户名", paramType = "query", dataType = "String", required = true, readOnly = true)
    public UserDto findUserByUserName(@PathVariable("username") String username) {
        LOGGER.info("当前查询的用户：{},当前的token{}", username);
        return userService.findUserByUserName(username);
    }

    /**
     * 根据用户id查询用户
     *
     * @param id
     * @return
     */
    @GetMapping("find/by/{id}")
    @ApiOperation( position = 1, value = "通过用户id获取用户详情", notes = "通过用户id获取用户详情", tags = "用户相关接口", httpMethod = "GET", produces = "application/json")
    @ApiImplicitParam(name = "id", value = "用户id", paramType = "query", dataType = "String", required = true, readOnly = true)
    public UserDto findUserByUserId(@PathVariable("id") Long id) {
        LOGGER.info("当前查询的用户：" + id);
        return userService.findUserByUserId(id);
    }

    /**
     * 注销用户，原理是将用户的token放置进缓存中，如果缓存中存在此token的key，则在网关层禁止向下路由
     *
     * @param token 用户的access_token
     * @return {@link ResultDto}
     */
    @ApiOperation( position = 1, value = "通过令牌注销用户", notes = "通过令牌注销用户", tags = "用户相关接口", httpMethod = "POST", produces = "application/json")
    @ApiImplicitParam(name = "token", value = "经过授权的令牌", paramType = "query", dataType = "String", required = true, readOnly = true)
    @PostMapping("logout/token")
    public ResultDto<?> logoutToken(@RequestParam("token") @NotNull String token) {
        Cache defaultTokenCache = ehcacheComponent.getDefaultTokenCache();
        try {
            checkTokenEndpoint.checkToken(token);
        } catch (Exception e) {
            return ResultDto.error("注销失败,不合法的Token!");
        }
        defaultTokenCache.put(new Element(token, new byte[1]));
        Element element = defaultTokenCache.get(token);
        LOGGER.debug("accept token : {}", token);
        LOGGER.debug("defaultTokenCache:" + defaultTokenCache);
        LOGGER.debug("saved element:" + element);
        return ResultDto.success("注销用户成功!");
    }


}


