package liuzhuomin.cloud.config;

import com.google.common.collect.Lists;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.netflix.zuul.filters.Route;
import org.springframework.cloud.netflix.zuul.filters.RouteLocator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.PropertySource;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.OrRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;
import springfox.documentation.swagger.web.SwaggerResource;
import springfox.documentation.swagger.web.SwaggerResourcesProvider;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;
import java.util.List;

/**
 * 配置swaggerApi的访问权限
 *
 * @author Jihy
 * @since 2019-07-01 14:17
 */
@Configuration
@Primary
@EnableSwagger2
@PropertySource("classpath:application.properties")
public class DocumentationConfig implements SwaggerResourcesProvider {

    private final Logger logger = LoggerFactory.getLogger(DocumentationConfig.class);

    @Value("#{'${zuul.ignore.urls:none}'.split(',')}")
    private List<String> ignoreUrls;

    @Autowired
    RouteLocator routeLocator;

    @Override
    public List<SwaggerResource> get() {
        List resources = new ArrayList();
        resources.add(swaggerResource("载体备案", "/carrier/*", "1.0"));
        for (Route route : routeLocator.getRoutes()) {
            resources.add(
                    swaggerResource(route.getId(), route.getFullPath().replace("**", "v2/api-docs"), "1.0"));
        }
        return resources;
    }

    private SwaggerResource swaggerResource(String name, String location, String version) {
        SwaggerResource swaggerResource = new SwaggerResource();
        swaggerResource.setName(name);
        swaggerResource.setLocation(location);
        swaggerResource.setSwaggerVersion(version);
        return swaggerResource;
    }

    @Bean
    public OrRequestMatcher orRequestMatcher() {
        return new OrRequestMatcher(requestMatchers());
    }

    public List<RequestMatcher> requestMatchers() {
        if ("none".equals(ignoreUrls.get(0))) {
            return Lists.newArrayList((RequestMatcher) new AntPathRequestMatcher("none"));
        }
        logger.info("current ignore urls:\t{}", ignoreUrls);
        int size = ignoreUrls.size();
        List<RequestMatcher> matchers = new ArrayList<>(size);
        for (int i = 0; i < size; i++) {
            String currentAnt = ignoreUrls.get(i);
            matchers.add(new AntPathRequestMatcher(currentAnt));
        }
        return matchers;
    }
}


