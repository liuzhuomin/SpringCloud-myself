package liuzhuomin.cloud.config;

import com.alibaba.fastjson.JSON;
import liuzhuomin.cloud.BootException;
import liuzhuomin.cloud.dto.ResultDto;
import org.apache.log4j.Logger;
import org.springframework.core.MethodParameter;
import org.springframework.http.MediaType;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

@SuppressWarnings("rawtypes")
@RestControllerAdvice
public class SpringExceptionHandle implements ResponseBodyAdvice {

    private final Logger log = Logger.getLogger(SpringExceptionHandle.class);

    @Override
    public boolean supports(MethodParameter returnType, Class converterType) {
        return true;
    }

    /**
     * 封装处理正常的controller(为了照顾swagger的api生成，所以未曾使用)
     *
     * @param body
     * @param returnType
     * @param selectedContentType
     * @param selectedConverterType
     * @param request
     * @param response
     * @return
     */
    @Override
    public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType,
                                  Class selectedConverterType, ServerHttpRequest request, ServerHttpResponse response) {
        return body;
    }

    /**
     * 处理异常contoller
     *
     * @param e
     * @return
     * @throws IOException
     */
    @ExceptionHandler(Throwable.class)
    public void handle(Throwable e, HttpServletResponse response) throws IOException {
        throwException(e, response);
    }

    /**
     * 处理异常contoller
     *
     * @param e
     * @return
     * @throws IOException
     */
    @ExceptionHandler(BootException.class)
    public void handle(BootException e, HttpServletResponse response) throws IOException {
        e.printStackTrace();
        Exception readlyExcept = e.getE();
        if (readlyExcept != null)
            readlyExcept.printStackTrace();
        throwException(e, response);
    }

    private void throwException(Throwable e, HttpServletResponse response) throws IOException {
        log.warn(e);
        e.printStackTrace();
        ResultDto error = ResultDto.error(e);
        PrintWriter writer = response.getWriter();
        writer.println(JSON.toJSONString(error));
        writer.flush();
        writer.close();
    }

}
