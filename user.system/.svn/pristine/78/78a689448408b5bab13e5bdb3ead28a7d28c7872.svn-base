package xinrui.cloud.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import xinrui.cloud.domain.GroupType;
import xinrui.cloud.domain.vto.OtherGroupVto;
import xinrui.cloud.domain.vto.TechnologyBankUserVto;
import xinrui.cloud.dto.OtherGroupDto;
import xinrui.cloud.dto.ResponseDto;
import xinrui.cloud.dto.ResultDto;
import xinrui.cloud.dto.UserDto;
import xinrui.cloud.service.feign.BankGroupServiceFeign;
import xinrui.cloud.service.feign.UserServiceFeign;
import xinrui.cloud.vto.UserVto;

import java.util.List;

/**
 * 科技金融模块（银行账号相关）
 *
 * @author liuliuliu
 * @version 1.0
 * @date 2019/8/9 14:57
 */
@Api("科技金融模块（银行账号相关）")
@RestController
@RequestMapping("bank")
@Slf4j
public class BankController {

    @Autowired
    BankGroupServiceFeign bankGroupServiceFeign;

    @Autowired
    UserServiceFeign userServiceFeign;

    @PostMapping("/{name}")
    @ApiOperation(position = 1, value = "添加银行组织", notes = "根据银行名称创建银行组织",
            tags = "科技金融模块（银行账号相关）", httpMethod = "POST", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiImplicitParam(name = "name", value = "银行的名称", paramType = "path", dataType = "STRING", required = true)
    public ResultDto<?> createBank(@PathVariable("name") String name) {
        ResultDto<OtherGroupDto> otherGroupDtoResultDto = bankGroupServiceFeign.create(new OtherGroupVto(name));
        if (otherGroupDtoResultDto != null) {
            return ResponseDto.success("创建成功!");
        }
        return ResponseDto.success("创建失败!");
    }

    @DeleteMapping("/{id}")
    @ApiOperation(position = 2, value = "删除银行组织", notes = "根据银行id删除银行组织",
            tags = "科技金融模块（银行账号相关）", httpMethod = "DELETE", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiImplicitParam(name = "id", value = "银行组织对象的id", paramType = "path", dataType = "INT", required = true)
    public ResultDto<?> deleteBank(@PathVariable("id") Long id) {
        ResultDto resultDto = bankGroupServiceFeign.deleteById(id);
        if (resultDto != null) {
            return ResponseDto.success("删除成功!");
        }
        return ResponseDto.success("删除失败!");
    }

    @GetMapping
    @ApiOperation(position = 3, value = "获取银行组织列表", notes = "获取银行组织列表",
            tags = "科技金融模块（银行账号相关）", httpMethod = "GET", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResultDto<List<OtherGroupDto>> listBanks() {
        ResultDto bank = bankGroupServiceFeign.listByType("bank");
        Object data = bank.getData();
        return ResponseDto.success((List<OtherGroupDto>) data);
    }

    @PostMapping("/user")
    @ApiOperation(position = 4, value = "创建银行所属账号", notes = "根据所选银行组织的id，创建银行所属账号",
            tags = "科技金融模块（银行账号相关）", httpMethod = "POST",
            produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResultDto<?> createUser(@RequestBody @ApiParam("银行账号对象") TechnologyBankUserVto technologyBankUserVto) {
        UserVto userVto = TechnologyBankUserVto.toUserVto(technologyBankUserVto);
        ResultDto<UserDto> result = userServiceFeign.createUser(userVto);
        log.info("result  :{}", result);
        if (result != null) {
            Long id = result.getData().getId();
            ResultDto<UserDto> userDtoResultDto = userServiceFeign.aliasUser2Group(id,
                    technologyBankUserVto.getBankId(), GroupType.BANK);
            log.info("Alias2Group :{}", userDtoResultDto);
            if (userDtoResultDto != null) {
                return ResponseDto.success("创建成功!");
            } else {
                userServiceFeign.deleteUser(id);
            }
        }
        return ResponseDto.error("创建失败!");
    }

    @DeleteMapping("/user/{id}")
    @ApiOperation(position = 6, value = "删除用户", notes = "通过用户id删除用户", tags = "科技金融模块（银行账号相关）"
            , httpMethod = "DELETE", produces = "application/json")
    @ApiImplicitParam(name = "id", value = "用户id", paramType = "path", dataType = "INT", required = true)
    public ResultDto<?> deleteUser(@PathVariable("id") Long id) {
        if (userServiceFeign.deleteUser(id) != null) {
            return ResultDto.success("删除成功!");
        } else {
            return ResultDto.error("删除失败!");
        }
    }

    @PutMapping("/user")
    @ApiOperation(position = 4, value = "修改用户", notes = "通过json数据修改用户", tags = "科技金融模块（银行账号相关）"
            , httpMethod = "PUT", produces = "application/json")
    public ResultDto<UserDto> putUser(@RequestBody @ApiParam("科技金融银行账户对象(接收)") TechnologyBankUserVto technologyBankUserVto) {
        return userServiceFeign.putUser(TechnologyBankUserVto.toUserVto(technologyBankUserVto));
    }

}
