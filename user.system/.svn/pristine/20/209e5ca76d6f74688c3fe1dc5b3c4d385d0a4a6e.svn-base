package liuzhuomin.cloud.filter;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.netflix.zuul.ZuulFilter;
import com.netflix.zuul.context.RequestContext;
import liuzhuomin.cloud.BootException;
import liuzhuomin.cloud.dto.ResultDto;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;

/**
 * 访问过滤器
 */
@Component
public class AccessFilter extends ZuulFilter {

    @Autowired
    RestTemplate restTemplate;

    private final static String TOKEN_KEY = "access_token";

    private final Logger logger = LoggerFactory.getLogger(AccessFilter.class);

    /**
     * 过滤器类型选择： pre 为路由前 route 为路由过程中 post 为路由过程后 error 为出现错误的时候 同时也支持static
     * ，返回静态的响应，详情见StaticResponseFilter的实现
     * 以上类型在会创建或添加或运行在FilterProcessor.runFilters(type)
     */
    @Override
    public String filterType() {
        return FilterConstants.PRE_TYPE;
    }

    /**
     * 用来过滤器排序执行的
     *
     * @return 排序的序号
     */
    @Override
    public int filterOrder() {
        return 1;
    }

    /**
     * 是否通过这个过滤器，默认为true，改成false则不启用
     */
    @Override
    public boolean shouldFilter() {
        RequestContext ctx = RequestContext.getCurrentContext();
        HttpServletRequest request = ctx.getRequest();
        if (request.getMethod().equals(RequestMethod.OPTIONS.name())) {
            return false;
        }
        return true;
    }

    /**
     * 过滤器的逻辑
     */
    @Override
    public Object run() {
        RequestContext ctx = RequestContext.getCurrentContext();
        HttpServletRequest request = ctx.getRequest();
        HttpServletResponse response = ctx.getResponse();
        response.setHeader("Access-Control-Allow-Origin", request.getHeader("Origin"));
        response.setHeader("Access-Control-Allow-Credentials", "true");
        response.setHeader("Access-Control-Expose-Headers", "X-forwarded-port, X-forwarded-host");
        response.setHeader("Vary", "Origin,Access-Control-Request-Method,Access-Control-Request-Headers");

        ctx.setSendZuulResponse(true);
        String requestUrl = request.getRequestURL().toString();
        logger.debug("进入访问过滤器，访问的url:{}，访问的方法：{}", requestUrl, request.getMethod());
        String accessToken = request.getHeader(TOKEN_KEY);

        Map<String, List<String>> requestQueryParams = ctx.getRequestQueryParams();
        if (requestQueryParams == null) {
            requestQueryParams = Maps.newHashMap();
        }

        boolean containsTokenByParameter = requestQueryParams.containsKey(TOKEN_KEY);
        if (!containsTokenByParameter) {
            addParameter(ctx, accessToken);
        } else {
            ctx.addZuulRequestHeader(TOKEN_KEY, requestQueryParams.get(TOKEN_KEY).get(0));
        }

        if (!containsTokenByParameter && StringUtils.isEmpty(accessToken) && requestUrl.indexOf("authorization") == -1) {
            if (!requestUrl.contains("swagger-ui.html") && !requestUrl.contains("/static/") && !requestUrl
                    .contains("/templates/") && !requestUrl.contains("/webjars/") && !requestUrl.contains(
                    "swagger-resources") && !requestUrl.contains("v2/api-docs")) {
                logger.warn("request fail as url {}", requestUrl);
                logError(ctx, response);
                return null;
            }else{
                ResponseEntity<ResultDto> oauthEntity = restTemplate.getForEntity("http://authorization:8200/oauth/check_token?token=" + accessToken, ResultDto.class);
                logger.info("response entity :{}", oauthEntity);
                if (!oauthEntity.getStatusCode().is2xxSuccessful()) {
                    logger.warn("request fail! and status code is {}", oauthEntity.getStatusCode());
                    logError(ctx, response);
                } else {
                    ResultDto body = oauthEntity.getBody();
                    if (body.getCode() != HttpStatus.OK.value() || ResultDto.ERROR.equals(body.getMessage())) {
                        logger.info("request successful ,but response not except!");
                        logError(ctx, response);
                    }
                }
            }
        }

        Enumeration<String> headerNames = request.getHeaderNames();
        while (headerNames.hasMoreElements()) {
            String headerName = headerNames.nextElement();
            String header = request.getHeader(headerName);
            logger.debug("当前请求的header头为{}:{}", headerName, header);
        }
        Map<String, String[]> parameterMap = request.getParameterMap();
        for (Map.Entry<String, String[]> m : parameterMap.entrySet()) {
            String key = m.getKey();
            String[] value = m.getValue();
            logger.debug("当前请求的参数为{}:{}", key, value[0]);
        }

        return ResultDto.SUCCESS;
    }

    /**
     * 返回验证失败的提示
     *
     * @param ctx
     * @param response
     */
    private void logError(RequestContext ctx, HttpServletResponse response) {
        PrintWriter writer = null;
        ctx.setSendZuulResponse(false);
        ctx.setResponseStatusCode(401);
        try {
            response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);
            writer = response.getWriter();
            writer.println(ResultDto.error(new BootException(401, "身份验证失败")));
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            writer.close();
        }
    }

    public void addParameter(RequestContext ctx, String accessToken) {
        Map<String, List<String>> requestQueryParams = ctx.getRequestQueryParams();
        if (requestQueryParams == null)
            requestQueryParams = Maps.newHashMap();
        ArrayList<String> objects = Lists.newArrayList();
        objects.add(accessToken);
        requestQueryParams.put(TOKEN_KEY, objects);
        ctx.setRequestQueryParams(requestQueryParams);
    }
}
