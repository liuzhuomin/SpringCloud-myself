package liuzhuomin.cloud.config;

import com.google.common.base.Strings;
import liuzhuomin.cloud.BootException;
import liuzhuomin.cloud.controller.AuthenticationController;
import liuzhuomin.cloud.dto.ResultDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.SecurityProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * <B>Title:</B>authServerConfig</br>
 * <B>Description:</B>
 * 保护应用程序url、验证提交的用户名和密码、重定向到登录表单，等等
 * </br>
 * <B>Copyright: </B>Copyright (c) 2019 </br>
 *0
 * @author liuliuliu
 * @version 1.0
 * @date2019/6/25 15:44
 */
@Configuration
@Order(SecurityProperties.ACCESS_OVERRIDE_ORDER)
@EnableWebSecurity
public class WebSecurityConfigurerEnhance extends WebSecurityConfigurerAdapter {

    @Autowired
    UserDetailsService userDetailsService;

    @Autowired
    AuthenticationTokenFilter authenticationTokenFilter;

    @Override
    @Bean
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    public void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService);
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable();
        http.authorizeRequests().antMatchers("/oauth/**","/user/logout/**","/eureka/**").permitAll();
        http.authorizeRequests().anyRequest().authenticated();
        http.formLogin().and().httpBasic();
        http.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class)
                .headers()
                .cacheControl();
    }

}
@Configuration
 class AuthenticationTokenFilter implements Filter{

    @Autowired
    AuthenticationController authenticationController;

    @Override
    public void init(FilterConfig filterConfig) throws ServletException{

    }

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        if (servletRequest instanceof HttpServletRequest){
            String token = ((HttpServletRequest) servletRequest).getParameter("access_token");
            if(token!=null){
                ResultDto<?> resultDto = authenticationController.checkOutToken(token);
                System.out.println("resultDto:"+resultDto);
                if(resultDto.getCode()!=200){
                    HttpServletResponse response= (HttpServletResponse) servletResponse;
                    PrintWriter writer = response.getWriter();
                    try {
                        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);
                        writer = response.getWriter();
                        writer.println(ResultDto.error(new BootException(401, "身份验证失败")));
                        writer.flush();
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        writer.close();
                    }
                    return;
                }
            }

        }
        filterChain.doFilter(servletRequest, servletResponse);
    }

    @Override
    public void destroy(){
    }
}
