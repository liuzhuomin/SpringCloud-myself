package liuzhuomin.cloud.controller;

import io.swagger.annotations.Api;
import liuzhuomin.cloud.config.EhcacheComponent;
import liuzhuomin.cloud.dto.ResultDto;
import liuzhuomin.cloud.dto.UserDto;
import liuzhuomin.cloud.service.UserService;
import net.sf.ehcache.Cache;
import net.sf.ehcache.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.*;

import javax.validation.constraints.NotNull;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * <B>Title:</B>UserController</br>
 * <B>Description:</B>用户相关接口</br>
 * <B>Copyright: </B>Copyright (c) 2019 </br>
 *
 * @author liuliuliu
 * @version 1.0
 * @date2019/6/26 20:17
 */
@Api("用户相关接口")
@RestController
@RequestMapping("user")
public class UserController {

    private final static Logger LOGGER= LoggerFactory.getLogger(UserController.class);

    @Autowired
    UserService userService;

    @Autowired
    EhcacheComponent ehcacheComponent;

    /**
     * 根据用户名称查询用户
     * @param username
     * @return
     */
    @GetMapping("find/{username}")
    public UserDto findUserByUserName(@PathVariable("username") String username){
        LOGGER.info("当前查询的用户：{},当前的token{}",username);
        return userService.findUserByUserName(username);
    }

    /**
     * 根据用户id查询用户
     * @param id
     * @return
     */
    @GetMapping("find/by/{id}")
    public UserDto findUserByUserId(@PathVariable("id") Long id){
      LOGGER.info("当前查询的用户："+id);
      return userService.findUserByUserId(id);
    }

    /**
     * 注销用户，原理是将用户的token放置进缓存中，如果缓存中存在此token的key，则在网关层禁止向下路由
     * @param token  用户的access_token
     * @return  {@link ResultDto}
     */
    @PostMapping("logout/{token}")
    public ResultDto<?> findUserByUserId(@PathVariable("token") @NotNull String token){
        Cache defaultTokenCache = ehcacheComponent.getDefaultTokenCache();
        Assert.notNull(defaultTokenCache,"系统故障");
        System.out.println("defaultTokenCache:"+defaultTokenCache);
        defaultTokenCache.put(new Element(token,new byte[1]));
        Element element = defaultTokenCache.get(token);
        System.out.println("saved element:"+element);
        return ResultDto.success();
    }


}


