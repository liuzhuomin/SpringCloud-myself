package liuzhuomin.cloud.config;

import com.google.common.base.Predicate;
import java.io.UnsupportedEncodingException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.ParameterBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.schema.ModelRef;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.service.Parameter;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
@PropertySource({"classpath:application.properties"})
public class SwaggerConfig implements InitializingBean {

    private final static Logger LOGGER = LoggerFactory.getLogger(SwaggerConfig.class);

    @Value("${swagger.title: swaggerTitle}")
    private String swaggerTitle;

    @Value("${swagger.concatName: swaggerConcatName}")
    private String swaggerConcatName;

    @Value("${swagger.concatUrl:swaggerConcatUrl}")
    private String swaggerConcatUrl;

    @Value("${swagger.concatEmail:swaggerConcatEmail}")
    private String swaggerConcatEmail;

    @Value("${swagger.version:1.0}")
    private String swaggerVersion;

    @Value("${swagger.description: restfulAPI}")
    private String swaggerDescription;

    @Value("${swagger.basePackage:liuzhuomin}")
    private String swaggerBasePackage;

    @Value("${swagger.exportPath:/}")
    private String swaggerExportPath;

    @Value("${swagger.host:127.0.0.1}")
    private String swaggerHost;

    @Bean
    public Docket createRestApi() throws UnknownHostException {
      ParameterBuilder tokenParameter = new ParameterBuilder();
      List<Parameter> pars = new ArrayList<>();
      tokenParameter.name("access_token").description("Token令牌").modelRef(new ModelRef("String")).parameterType("header").required(false).build();
      pars.add(tokenParameter.build());
      ApiInfo build = new ApiInfoBuilder().title(iso2Utf8(swaggerTitle))
          .contact(new Contact(iso2Utf8(swaggerConcatName), iso2Utf8(swaggerConcatUrl), iso2Utf8(swaggerConcatEmail)))
          .version(iso2Utf8(swaggerVersion)).description(iso2Utf8(swaggerDescription)).build();
      Predicate<RequestHandler> basePackage = RequestHandlerSelectors.basePackage(swaggerBasePackage);
      return new Docket(DocumentationType.SWAGGER_2).host(swaggerHost).apiInfo(build).select().apis(basePackage)
          .paths(PathSelectors.any()).build().globalOperationParameters(pars);
    }

    @Override
    public void afterPropertiesSet() {
        LOGGER.info("swagger配置加载完成");
    }

    /**
     * ISO-8859-1编码转换成utf-8编码
     *
     * @param str 需要被转换编码的字符串
     * @return 转换完成后的字符串
     */
    public static String iso2Utf8(String str) {
        try {
            return new String(str.getBytes("ISO-8859-1"), "UTF-8");
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return null;
    }


}
