package liuzhuomin.cloud.compoment;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import io.jsonwebtoken.lang.Assert;
import liuzhuomin.cloud.BootException;
import liuzhuomin.cloud.dto.UserDto;
import liuzhuomin.cloud.service.UserServiceFeign;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.security.jwt.Jwt;
import org.springframework.security.jwt.JwtHelper;
import org.springframework.security.jwt.crypto.sign.RsaVerifier;
import org.springframework.stereotype.Component;

/**
 * <B>Title:</B>UserContext</br>
 * <B>Description:</B>  </br>
 * <B>Copyright: </B>Copyright (c) 2019 </br>
 * 获取当前用户的信息
 *
 * @author liuliuliu
 * @version 1.0
 * @date2019/6/28 14:52
 */
@Component
@Scope("singleton")
public class UserContext {

    private static volatile boolean tokenChange = false;

    @Autowired
    UserServiceFeign userClientService;

    private ThreadLocal<UserDto> userDtoThreadLocal = new ThreadLocal<>();

    private static String currentToken;

    private final static Logger LOGGER = LoggerFactory.getLogger(UserContext.class);

    public synchronized void setToken(String token) {
        if (StringUtils.isNotBlank(currentToken) && !currentToken.equals(token)) {
            tokenChange = true;
        } else {
            tokenChange = false;
        }
        currentToken = token;
    }

    public String getToken() {
        return currentToken;
    }

    public synchronized UserDto getCurrentUser() {
        Assert.notNull(currentToken, "token不能为空!");
        LOGGER.info("解析token并且获取用户信息");
        Jwt jwt = getJwt(currentToken);
        String claims = jwt.getClaims();
        JSONObject jsonObject = JSON.parseObject(claims);
        JSONObject user = jsonObject.getJSONObject("user");
        Long id = user.getLong("userId");
        LOGGER.info("当前的id为{}", id);
        UserDto userByUserId = userClientService.findUserByUserId(id);
        LOGGER.info("当前的用户是否为null{}", userByUserId == null);
        userDtoThreadLocal.set(userByUserId);
        return userDtoThreadLocal.get();
    }

    private Jwt getJwt(String token) {
        try {

            return JwtHelper.decodeAndVerify(token, new RsaVerifier("-----BEGIN PUBLIC KEY-----\n" +
                    "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2WTuH+Zl1W+bBCo3oC0D\n" +
                    "Kix2OVwPgjiA6Mk8WtxQ/Blzln7UsE1ORS2j9Q6O7NIFOqqlWsSP45ND1YvyZe/V\n" +
                    "iCQginSMAptANTUT5a4WWr5Q4RRuEcvKYsLTChgN54wnxugy6d6haoQf33doshO1\n" +
                    "/6M9ovpgUTh/Zvy1jy80tejr/3o0taDAJz+6E4CAaYxKhn8iSEqslS2d6GNXr/bH\n" +
                    "/h+Ih6ptz67e1URNX2DU2IWJJd94ffaZ2Qq8w5tHPENPsBfEUs8ZdrDEKQUbpR8i\n" +
                    "uCi8Eu8qoZRhTw4VSGRLGBemngRzNpo6LJuXb4tNJVHa0Jy0/xK5Na7JYqK1hdsG\n" +
                    "BwIDAQAB\n" +
                    "-----END PUBLIC KEY-----"));
        } catch (Exception e) {
            throw new BootException("过期的token!");
        }
    }


}
