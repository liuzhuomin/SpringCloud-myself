package xinrui.cloud.common.utils;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.springframework.beans.BeanUtils;
import org.springframework.util.Assert;
import org.springframework.util.CollectionUtils;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.Date;
import java.util.List;
import java.util.Map;

public class BeanUtilsEchance {

    /**
     * 拷贝source的Date类型的属性到target,仅限时间类型的字段，并且target对应此时间类型的字段必须为String类型
     *
     * @param source
     * @param target
     */
    public static void copyDateFiled(Object source, Object target) {
        copyDateFiled(source, target, false);
    }

    /**
     * 拷贝source的属性到target,默认会将source的Date类型字段，
     * 按照{@link DateUtil#DEFAULT_STR_STYLE}时间格式拷贝到target对应的String类型字段中
     *
     * @param source
     * @param target
     * @param ignoreFields
     */
    public static void copyDateFiledEchance(Object source, Object target, String... ignoreFields) {
        copyDateFiled(source, target, true, ignoreFields);
    }

    private static void copyDateFiled(Object source, Object target, boolean copyElse, String... ignoreFields) {

        Assert.notNull(source, "source must not be null");
        Assert.notNull(target, "target must not be null");

        Map<String, Object> dataFields = Maps.newHashMap();
        Field[] declaredFields = source.getClass().getDeclaredFields();
        for (Field filed : declaredFields) {
            if (filed.getType().isAssignableFrom(Date.class)) {
                try {
                    dataFields.put(filed.getName(), DataUtil.invokeGetByObject(source, filed));
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                }
            }
        }

        List<String> ignoreFieldList = null;
        if (copyElse) {
            ignoreFieldList = Lists.newArrayList();
        }
        declaredFields = target.getClass().getDeclaredFields();
        for (Field filed : declaredFields) {
            String name = filed.getName();
            Object value = dataFields.get(name);
            if (value != null && filed.getType() == java.lang.String.class) {
                try {
                    if (copyElse) {
                        ignoreFieldList.add(name);
                    }
                    DataUtil.invokeSetByObject(target, filed, DateUtil.format((Date) value, DateUtil.DEFAULT_STR_STYLE));
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                }
            }
        }

        if (copyElse) {
            if (ignoreFields != null && ignoreFields.length > 0) {
                for (String s : ignoreFields)
                    ignoreFieldList.add(s);
            }
            String[] strings = ignoreFieldList.toArray(new String[ignoreFieldList.size()]);
            BeanUtils.copyProperties(source, target, strings);
        }

    }

    public static <T> List<T> copyList(List sources, Class<T> targetClazz) {
        List<T> result = Lists.newArrayList();
        if (CollectionUtils.isEmpty(sources))
            return result;
        for (Object o : sources) {
            T t = null;
            try {
                t = targetClazz.newInstance();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
            BeanUtils.copyProperties(o, t);
            result.add(t);
        }
        return result;
    }

    public static <T> List<T> copyList(List sources, Class<T> targetClazz, CopyListFilter<T> copyListFilter) {
        List<T> result = Lists.newArrayList();
        if (CollectionUtils.isEmpty(sources))
            return result;
        for (Object o : sources) {
            T t = null;
            try {
                t = targetClazz.newInstance();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
//            BeanUtils.copyProperties(o, t);
            copyListFilter.copy(o, t);
            result.add(t);
        }
        return result;
    }

    public interface CopyListFilter<T> {
        void copy(Object source, T target);
    }
}
