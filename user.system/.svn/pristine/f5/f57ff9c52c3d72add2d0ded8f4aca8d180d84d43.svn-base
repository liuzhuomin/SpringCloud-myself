package xinrui.cloud.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import xinrui.cloud.BootException;
import xinrui.cloud.compoment.Application;
import xinrui.cloud.domain.TechnologyFinancialFile;
import xinrui.cloud.domain.dto.TechnologyLoanAmountDto;
import xinrui.cloud.domain.dto.TechnologyLoanDateDto;
import xinrui.cloud.domain.dto.TechnologyLoanTypeDto;
import xinrui.cloud.dto.ResponseDto;
import xinrui.cloud.dto.ResultDto;
import xinrui.cloud.service.TechnologyFinancialService;

import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * 科技金融相关项目
 *
 * @author liuliuliu
 * @version 1.0
 * @date 2019/8/5 16:23
 */
@Api("科技金融模块")
@RestController
@RequestMapping("technology")
public class TechnologyFinancialController {

    @Autowired
    TechnologyFinancialService technologyFinancialService;

    @GetMapping("/dates")
    @ApiOperation(position = 1, value = "获取贷款期限列表", notes = "获取贷款期限列表(3个月、5个月等)", tags = "科技金融模块", httpMethod = "GET", produces = "application/json")
    public ResultDto<List<TechnologyLoanDateDto>> dates() {
        return ResponseDto.success(technologyFinancialService.dates());
    }

    @GetMapping("/types")
    @ApiOperation(position = 1, value = "获取贷款类型列表", notes = "获取贷款类型列表(有价证券、票据等)", tags = "科技金融模块", httpMethod = "GET", produces = "application/json")
    public ResultDto<List<TechnologyLoanTypeDto>> types() {
        return ResponseDto.success(technologyFinancialService.types());
    }

    @GetMapping("/amounts")
    @ApiOperation(position = 1, value = "获取贷款额度列表", notes = "获取贷款额度列表(100万以下、200万等)", tags = "科技金融模块", httpMethod = "GET", produces = "application/json")
    public ResultDto<List<TechnologyLoanAmountDto>> amounts() {
        return ResponseDto.success(technologyFinancialService.amounts());
    }

    @PostMapping(value = "/upload", consumes = {MediaType.MULTIPART_FORM_DATA_VALUE})
    public ResultDto uploadFile(@RequestPart String description, @RequestPart MultipartFile file) throws IOException {
        String extension = FilenameUtils.getExtension(file.getOriginalFilename());
        String[] suffixArray = new String[]{"BMP", "JPG", "JPEG",
                "PNG", "GIF", "PCX", "TIFF", "TGA", "EXIF",
                "FPX", "SVG", "PSD"};
        if (StringUtils.isNotBlank(extension)) {
            boolean isAccess = false;
            for (int i = 0; i < suffixArray.length; i++) {
                String suffix = suffixArray[i];
                isAccess = extension.equalsIgnoreCase(suffix);
                if (isAccess) {
                    break;
                }
            }
            if (!isAccess) {
                return ResponseDto.error("不合法的文件格式!");
            }
        }
        TechnologyFinancialFile technologyFinancialFile = new TechnologyFinancialFile();
        technologyFinancialFile.setUserId(Application.getCurrentUser().getId());
        technologyFinancialFile.setServerUri(Application.getBaseUrl());
        technologyFinancialFile.setMenu("/test");
        technologyFinancialFile.setDescription("测试文件");
        saveFile("C://test", file);
        String downLoadPath = technologyFinancialFile.getFullPath() + File.separator + file.getOriginalFilename();
        return ResponseDto.success(downLoadPath);
    }

    private final static String ROOT_PATH = "C:";

    /**
     * 保存文件操作
     * 1.文件名中的.会被替换
     * 2.文件名包括后缀重复了的会显示成原本文件名(当前重复数量)+后缀的格式
     */
    public File saveFile(String path, MultipartFile file) throws IOException {
        System.out.println(path);
        String fileName = file.getOriginalFilename();
        String fileNameNotPrefix = fileName.substring(0, fileName.lastIndexOf("."));
        String prefix = fileName.substring(fileName.lastIndexOf("."));
        fileNameNotPrefix = fileNameNotPrefix.replace(".", "");
        fileName = fileNameNotPrefix + prefix;
        if (fileNameNotPrefix.contains(File.separator) || fileNameNotPrefix.contains("\\")) {
            throw new BootException("文件名非法格式!");
        }
        File isNotExist = new File(path);
        if (!isNotExist.exists()) {
            isNotExist.mkdir();
        }
        FilenameUtils.getExtension(file.getOriginalFilename());
        File target = new File(path + File.separator + fileName);
        if (target.exists()) {
            String name = target.getName();
            File[] listFiles = target.getParentFile().listFiles();
            int max = 0;
            for (File file$ : listFiles) {
                if (file$.isFile()) {
                    String fileNames = file$.getName();
                    String suffix = fileNames.substring(fileNames.lastIndexOf('.'));
                    fileNames = fileNames.substring(0, fileNames.lastIndexOf('.'));
                    if (fileNames.indexOf(fileNameNotPrefix) != -1 && suffix.equals(prefix)) {
                        max++;
                    }
                }
            }
            name = fileNameNotPrefix + "(" + max + ")" + prefix;
            target = new File(path + File.separator + name);
            file.transferTo(target);
        } else {
            File parentFile = target.getParentFile();
            if (!parentFile.exists()) {
                boolean mkdirs = parentFile.mkdirs();
                if (mkdirs) {
                    file.transferTo(target);
                }
            } else {
                file.transferTo(target);
            }
        }
        return target;
    }

}
