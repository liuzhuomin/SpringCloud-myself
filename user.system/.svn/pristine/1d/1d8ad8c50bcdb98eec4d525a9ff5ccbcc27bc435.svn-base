package xinrui.cloud.service.impl;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;
import xinrui.cloud.BootException;
import xinrui.cloud.common.utils.DateUtil;
import xinrui.cloud.compoment.Application;
import xinrui.cloud.domain.*;
import xinrui.cloud.domain.dto.*;
import xinrui.cloud.domain.vto.*;
import xinrui.cloud.service.TechnologyFinancialFileService;

import java.text.ParseException;
import java.util.Date;
import java.util.List;


@Service
public class TechnologyFinancialServiceImpl extends BaseServiceImpl<TechnologyFinancial> implements xinrui.cloud.service.TechnologyFinancialService {

    @Autowired
    TechnologyFinancialFileService technologyFinancialFileService;

    @Override
    public List<TechnologyLoanDateDto> dates() {
        return TechnologyLoanDateDto.copy(dao.listObjBy(TechnologyLoanDate.class));
    }

    @Override
    public List<TechnologyLoanTypeDto> types() {
        return TechnologyLoanTypeDto.copy(dao.listObjBy(TechnologyLoanType.class));
    }

    @Override
    public List<TechnologyLoanAmountDto> amounts() {
        return TechnologyLoanAmountDto.copy(dao.listObjBy(TechnologyLoanAmount.class));
    }

    @Override
    public TechnologyFinancialDto saveByDto(TechnologyFinancialVto technologyFinancialVto) {

        TechnologyFinancial technologyFinancial = new TechnologyFinancial();

        checkProcessData(technologyFinancialVto, technologyFinancial);

        //申请条件
        List<TechnologyApplyCondition> technologyApplyConditions = TechnologyApplyConditionsVto.toBean(technologyFinancialVto.getTechnologyApplyConditions());
        technologyFinancial.getTechnologyApplyConditions().addAll(technologyApplyConditions);

        //办理流程
        List<TechnologyProcess> technologyProcesses = TechnologyProcessesVto.toBean(technologyFinancialVto.getTechnologyProcesses());
        technologyFinancial.getTechnologyProcesses().addAll(technologyProcesses);
        if (technologyProcesses.size() > 20) {
            throw new BootException("最多添加20条段落!");
        }

        //常见问题
        List<TechnologyUsualProblem> technologyUsualProblems = TechnologyUsualProblemsVto.toBean(technologyFinancialVto.getTechnologyUsualProblems());
        technologyFinancial.getTechnologyUsualProblems().addAll(technologyUsualProblems);
        if (technologyUsualProblems.size() > 5) {
            throw new BootException("最多添加5条问题!");
        }

        BeanUtils.copyProperties(technologyFinancialVto, technologyFinancial, "viewImages", "loanTimeLimit"
                , "loanAmount", "technologyApplyConditions", "technologyUsualProblems", "technologyProcesses", "createDate");

        technologyFinancial.setUserId(Application.getCurrentUser().getId());

        return TechnologyFinancialDto.copy(persistAndGet(technologyFinancial));

    }


    private void checkProcessData(TechnologyFinancialVto technologyFinancialVto, TechnologyFinancial technologyFinancial) {
        //关联存储过的文件对象
        List<ViewImagesVto> viewImages = technologyFinancialVto.getViewImages();
        for (ViewImagesVto file : viewImages) {
            TechnologyFinancialFile fileObj = technologyFinancialFileService.findByPath(file.getFullPath());
            if (fileObj == null) {
                throw new BootException("所选文件已经被删除!");
            }
            technologyFinancial.getViewImages().add(fileObj);
            if (technologyFinancial.getViewImages().size() > 6) {
                throw new BootException("只支持传递6张展示图片!");
            }
        }

        //贷款期限
        LoanTimeLimitVto loanTimeLimit = technologyFinancialVto.getLoanTimeLimit();
        if (loanTimeLimit != null) {
            TechnologyLoanDate technologyLoanDate = dao.findSingleByProperty(TechnologyLoanDate.class, "id", loanTimeLimit.getId());
            if (technologyLoanDate == null) {
                throw new BootException("错误的贷款期限选项!");
            }
            technologyFinancial.setLoanTimeLimit(technologyLoanDate);
        }
        //贷款额度
        LoanAmountVto loanAmount = technologyFinancialVto.getLoanAmount();
        if (loanAmount != null) {
            TechnologyLoanAmount technologyLoanAmount = dao.findSingleByProperty(TechnologyLoanAmount.class, "id", loanAmount.getId());
            if (technologyLoanAmount == null) {
                throw new BootException("错误的贷款额度选项!");
            }
            technologyFinancial.setLoanAmount(technologyLoanAmount);
        }

        String endDate = technologyFinancialVto.getApplyEndDate();
        if (endDate != null) {
            try {
                Date parse = DateUtil.parse(endDate);
                technologyFinancial.setApplyEndDate(parse);
            } catch (ParseException e) {
                throw new BootException("结束申请时间格式错误!!");
            }
        }

        String category = technologyFinancialVto.getCategory();
        boolean notTrue = !TechnologyFinancial.TechnologyType.CREDIT_LOAN.value().equals(category) &&
                !TechnologyFinancial.TechnologyType.MORTGAGES.value().equals(category);
        if (notTrue) {
            throw new BootException("不支持的贷款类别!");
        }
    }
}
